# .github/workflows/ci.yml

name: ci

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v1.1.0 etc.
  pull_request:
    branches:
      - main

jobs:
  # --- 1. Frontend Test Job ---
  # This job runs to test the frontend part of the application.
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: install frontend dependencies
        run: npm ci --prefix frontend

      - name: lint frontend
        run: npm run lint --prefix frontend

      - name: build frontend
        run: npm run build --prefix frontend

  # --- 2. Backend Test Job ---
  # This job runs to test the backend services.
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: '**/go.sum'

      - name: run go tests
        run: |
          echo "discovering go modules from go.work..."
          modules=$(go list -m -f '{{.Dir}}')
          for module in $modules; do
            echo "--- running tests in module: $module ---"
            (cd "$module" && go test -v ./...)
          done

  # --- 3. Build and Push Images Job ---
  # This job runs ONLY on a push to the 'main' branch
  # and depends on the success of the previous test jobs.
  build-and-push:
    # Start after 'test-frontend' and 'test-backend' jobs are finished
    needs: [test-frontend, test-backend]
    # Run only on push events (to main branch or tags)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      # An action to detect which files have changed
      - name: get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44 # This action lists the changed files

      - name: login to azure container registry
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: acr login
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
        
      # --- Conditional build steps ---

      - name: build and push creator-service image
        # Run this step if a version tag is pushed, OR if there are changes in the relevant source files on a main branch push.
        if: |
          startsWith(github.ref, 'refs/tags/v') ||
          (steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, 'services/creator-service/') || contains(steps.changed-files.outputs.all_changed_files, 'pkg/') || contains(steps.changed-files.outputs.all_changed_files, 'k8s/creator-service.yaml')))
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/creator-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/creator-service:${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.sha }}
          build-args: APP_NAME=creator
          cache-from: |
            type=gha,scope=creator-service
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/creator-service:cache
          cache-to: |
            type=gha,scope=creator-service,mode=max
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/creator-service:cache,mode=max

      - name: build and push redirector-service image
        # Run this step if a version tag is pushed, OR if there are changes in the relevant source files on a main branch push.
        if: |
          startsWith(github.ref, 'refs/tags/v') ||
          (steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, 'services/redirector-service/') || contains(steps.changed-files.outputs.all_changed_files, 'pkg/') || contains(steps.changed-files.outputs.all_changed_files, 'k8s/redirector-service.yaml')))
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/redirector-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/redirector-service:${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.sha }}
          build-args: APP_NAME=redirector
          cache-from: |
            type=gha,scope=redirector-service
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/redirector-service:cache
          cache-to: |
            type=gha,scope=redirector-service,mode=max
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/redirector-service:cache,mode=max

      - name: build and push analytics-service image
        # Run this step if a version tag is pushed, OR if there are changes in the relevant source files on a main branch push.
        if: |
          startsWith(github.ref, 'refs/tags/v') ||
          (steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, 'services/analytics-service/') || contains(steps.changed-files.outputs.all_changed_files, 'pkg/') || contains(steps.changed-files.outputs.all_changed_files, 'k8s/analytics-service.yaml')))
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/analytics-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/analytics-service:${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.sha }}
          build-args: APP_NAME=analytics
          cache-from: |
            type=gha,scope=analytics-service
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/analytics-service:cache
          cache-to: |
            type=gha,scope=analytics-service,mode=max
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/analytics-service:cache,mode=max

      - name: build and push frontend image
        # Run this step if a version tag is pushed, OR if there are changes in the relevant source files on a main branch push.
        if: |
          startsWith(github.ref, 'refs/tags/v') ||
          (steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, 'frontend/') || contains(steps.changed-files.outputs.all_changed_files, 'k8s/frontend-service.yaml')))
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/frontend:${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.sha }}
          build-args: VITE_API_URL=/api
          cache-from: |
            type=gha,scope=frontend
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/frontend:cache
          cache-to: |
            type=gha,scope=frontend,mode=max
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/frontend:cache,mode=max

  # --- 4. Deploy to Kubernetes Job ---
  deploy:
    needs: build-and-push # Runs only after images are successfully pushed
    # Run only when a tag starting with 'v' is pushed
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: set up kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }} # IMPORTANT: Add this secret to your GitHub repository

      - name: update k8s manifests with new image tag
        run: |
          ACR_SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
          NEW_VERSION="${{ github.ref_name }}"
          
          echo "Updating Kubernetes manifests to use version: $NEW_VERSION"
          
          sed -i "s|image: ${ACR_SERVER}/veritas/creator-service:.*|image: ${ACR_SERVER}/veritas/creator-service:${NEW_VERSION}|g" k8s/creator-service.yaml
          sed -i "s|image: ${ACR_SERVER}/veritas/redirector-service:.*|image: ${ACR_SERVER}/veritas/redirector-service:${NEW_VERSION}|g" k8s/redirector-service.yaml
          sed -i "s|image: ${ACR_SERVER}/veritas/analytics-service:.*|image: ${ACR_SERVER}/veritas/analytics-service:${NEW_VERSION}|g" k8s/analytics-service.yaml
          sed -i "s|image: ${ACR_SERVER}/veritas/frontend:.*|image: ${ACR_SERVER}/veritas/frontend:${NEW_VERSION}|g" k8s/frontend-service.yaml

      - name: deploy to kubernetes
        run: |
          echo "Applying manifests to Kubernetes cluster..."
          kubectl apply -f k8s/
          echo "Deployment rollout initiated."