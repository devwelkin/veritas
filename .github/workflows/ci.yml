# .github/workflows/ci.yml

name: CI

# This workflow runs on pushes to the 'main' branch and on pull requests targeting 'main'.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # The 'ci' job contains all the steps for our Continuous Integration process.
  ci:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      # fetch-depth: 0 is required to fetch all history for all branches and tags,
      # which is necessary for the 'buf breaking' command to compare against main.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------
      # Frontend (React + TypeScript)
      # -------------------------------------------

      # Step 2: Set up Node.js environment for the frontend
      # Caches npm dependencies to speed up subsequent runs.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Step 3: Install frontend dependencies
      # 'npm ci' is used for faster, more reliable installs in CI environments.
      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend

      # Step 4: Lint frontend code for quality and style issues.
      - name: Lint Frontend
        run: echo ">>> Linting frontend..." && npm run lint --prefix frontend

      # Step 5: Build the frontend application to ensure it compiles.
      - name: Build Frontend
        run: echo ">>> Building frontend..." && npm run build --prefix frontend

      # -------------------------------------------
      # Backend (Go Services & Protobuf)
      # -------------------------------------------

      # Step 6: Set up Go environment
      # Caches Go modules based on go.work.sum to speed up subsequent builds.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: '**/go.sum'

      # Step 7: Run unit tests for all Go services.
      - name: Run Go Tests
        run: |
          echo "Discovering Go modules from go.work..."
          # We must test each module individually when using a go.work file.
          MODULES=$(go list -m -f '{{.Dir}}')
          for module in $MODULES; do
            echo "--- Running tests in module: $module ---"
            (cd "$module" && go test -v ./...)
          done

      # ------------------------------------------------
      # Build and Push Docker Images (only for main branch)
      # ------------------------------------------------

      # Step 8: Login to Azure
      - name: Login to Azure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 9: Login to Azure Container Registry
      - name: Login to Azure Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      # Step 10: Set up Docker Buildx
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      # Step 11: Build and push the creator-service image
      - name: Build and push creator-service image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/creator-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/creator-service:${{ github.sha }}
          build-args: APP_NAME=creator
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 12: Build and push the redirector-service image
      - name: Build and push redirector-service image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/redirector-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/redirector-service:${{ github.sha }}
          build-args: APP_NAME=redirector
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 13: Build and push the analytics-service image
      - name: Build and push analytics-service image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/analytics-service/Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/analytics-service:${{ github.sha }}
          build-args: APP_NAME=analytics
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 14: Build and push the frontend image
      - name: Build and push frontend image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend # build context'i frontend klasörü
          file: ./frontend/Dockerfile # Dockerfile yolunu belirt
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max