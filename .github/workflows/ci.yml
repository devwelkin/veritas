# .github/workflows/ci.yml

name: CI

# This workflow runs on pushes to the 'main' branch and on pull requests targeting 'main'.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Parallel jobs for faster CI
jobs:
  # -------------------------------------------
  # Frontend Testing & Building (Parallel)
  # -------------------------------------------
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for speed

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci --prefix frontend --prefer-offline

      - name: Lint Frontend
        run: npm run lint --prefix frontend

      - name: Build Frontend
        run: npm run build --prefix frontend

      # Upload build artifacts for docker job
      - name: Upload frontend build
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  # -------------------------------------------
  # Backend Testing (Parallel)
  # -------------------------------------------
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Shallow clone for speed

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache-dependency-path: '**/go.sum'

      # Parallel Go tests
      - name: Run Go Tests (Parallel)
        run: |
          echo "Running Go tests in parallel..."
          MODULES=$(go list -m -f '{{.Dir}}')
          
          # Run tests in parallel with background jobs
          for module in $MODULES; do
            echo "Starting tests in: $module"
            (cd "$module" && go test -v ./... -timeout=5m) &
          done
          
          # Wait for all background jobs to complete
          wait
          echo "All Go tests completed!"

  # -------------------------------------------
  # Smart Docker Building (Only on main, only changed services)
  # -------------------------------------------
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend] # Wait for tests to pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [creator-service, redirector-service, analytics-service, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need 2 commits to detect changes

      # Check if this service changed
      - name: Check service changes
        id: changes
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^frontend/' || echo "")
          else
            CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '^(services/${{ matrix.service }}/|pkg/)' || echo "")
          fi
          
          if [ -n "$CHANGED" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} has changes"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} has no changes, skipping build"
          fi

      # Download frontend build artifact
      - name: Download frontend build
        if: matrix.service == 'frontend' && steps.changes.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Login to Azure
        if: steps.changes.outputs.changed == 'true'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        if: steps.changes.outputs.changed == 'true'
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Set up Docker Buildx
        if: steps.changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      # Optimized Docker builds with better caching
      - name: Build and push ${{ matrix.service }} image
        if: steps.changes.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'frontend' && './frontend' || '.' }}
          file: ${{ matrix.service == 'frontend' && './frontend/Dockerfile' || format('./services/{0}/Dockerfile', matrix.service) }}
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/veritas/${{ matrix.service == 'frontend' && 'frontend' || matrix.service }}:${{ github.sha }}
          build-args: ${{ matrix.service != 'frontend' && format('APP_NAME={0}', split(matrix.service, '-')[0]) || 'VITE_API_URL=/api' }}
          # Advanced caching for faster builds
          cache-from: |
            type=gha,scope=${{ matrix.service }}
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/${{ matrix.service == 'frontend' && 'frontend' || matrix.service }}:cache
          cache-to: |
            type=gha,scope=${{ matrix.service }},mode=max
            type=registry,ref=${{ secrets.ACR_LOGIN_SERVER }}/veritas/${{ matrix.service == 'frontend' && 'frontend' || matrix.service }}:cache,mode=max

  # -------------------------------------------
  # Status Check (Required for branch protection)
  # -------------------------------------------
  ci-status:
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.frontend.result }}" != "success" ] || [ "${{ needs.backend.result }}" != "success" ]; then
            echo "CI failed!"
            exit 1
          fi
          echo "CI passed!"